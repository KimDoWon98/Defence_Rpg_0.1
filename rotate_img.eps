/*
좌우대칭 : 2
역재생 : 3
랜덤 : 4
빠르게 : 5
느리게 : 6

컨슘 : 7
스테이시스 : 8
스톰 : 9
아칸 : 10
리콜 : 11
*/
var screenX, screenY;
const chats = EUDArray(8);
const screenXs, screenYs = EUDArray(8), EUDArray(8);
function onPluginStart() {
    randomize();
    EUDRegisterObjectToNamespace("chats", chats);
    EUDRegisterObjectToNamespace("screenX", screenX);
    EUDRegisterObjectToNamespace("screenY", screenY);
    EUDRegisterObjectToNamespace("screenXs", screenXs);
    EUDRegisterObjectToNamespace("screenYs", screenYs);

    // 그래픽 회전, 모든 스크립트 체크, iscript 설정
    SetMemory(0x66D644, SetTo, 16777216);
    SetMemory(0x66D65C, SetTo, 16777216);
    SetMemory(0x66D6FC, SetTo, 65793);
    SetMemory(0x66E9CC, SetTo, 16777216);
    SetMemory(0x66E9E4, SetTo, 16777216);
    SetMemory(0x66EA64, SetTo, 65792);
    SetMemory(0x66EA84, SetTo, 65792);
    SetMemory(0x66F204, SetTo, 89);
    SetMemory(0x66F264, SetTo, 89);
    SetMemory(0x66F45C, SetTo, 89);
    SetMemory(0x66F4DC, SetTo, 89);
    SetMemory(0x66F4E0, SetTo, 89);
}

function beforeTriggerExec() {
    // 화면 위치 공유
    const checkX = Memory(0x628448, Exactly, 0);
    const checkY = Memory(0x628470, Exactly, 0);
    if (checkX && checkY) {
        screenX = 0x80000000;
    } else {
        const x, y = dwread(0x628448), dwread(0x628470);
        SetMemory(checkX + 8, SetTo, x);
        SetMemory(checkY + 8, SetTo, y);
        screenX = x / 32;
        screenY = y / 32;
    }
}

const epds = EUDArray(8);
const plays = EUDArray(8);  // 0: 일반, 1: 좌우대칭, 2: 역재생, 3: 좌우대칭+역재생, 4: 랜덤
const delays = EUDArray(8);  // 재생 딜레이 (적으면 빠름, 크면 느림)
const maxframes = EUDArray(8);  // 최대 프레임, 컨슘=17, 스테이시스=12, 스톰=5, 아칸=16, 리콜=10?
function afterTriggerExec() {
    foreach(p : EUDLoopPlayer()) {
        const x, y = screenXs[p], screenYs[p];
        if (x != -1 && y != -1) {
            setloc($L("p1") + p, x * 32 + 320, y * 32 + 160);
        }
        const chat = chats[p];
        if (chat <= 1) continue;
        else if (chat <= 4) {
            const play = EPD(plays) + p;
            // 좌우대칭, 역재생, 랜덤
            if (chat == 2) SetMemoryXEPD(play, Add, 1, 1);
            else if (chat == 3) SetMemoryXEPD(play, Add, 2, 2);
            else if (chat == 4) SetMemoryXEPD(play, Add, 4, 4);
        } else if (chat <= 6) {
            const delay = EPD(delays) + p;
            // 빠르게, 느리게
            if (chat == 5) SetMemoryEPD(delay, Subtract, 1);
            if (chat == 6) SetMemoryEPD(delay, Add, 1);
        } else if (chat <= 11) {
            RemoveUnit("Mojo", p);
            // 컨슘, 스테이시스, 스톰, 아칸, 리콜
            if (chat == 7) { wwrite(0x6662E6, 517); maxframes[p] = 17;
            } else if (chat == 8) { wwrite(0x6662E6, 367); maxframes[p] = 12;
            } else if (chat == 9) { wwrite(0x6662E6, 550); maxframes[p] = 5;
            } else if (chat == 10) { wwrite(0x6662E6, 549); maxframes[p] = 16;
            } else if (chat == 11) { wwrite(0x6662E6, 391); maxframes[p] = 10; }
            const maybe_ptr, maybe_epd = cunitepdread_epd(EPD(0x628438));
            CreateUnit(1, "Mojo", $L("p1") + p, p);
            if (Memory(0x628438, Exactly, maybe_ptr)) {
                setcurpl(p);
                DisplayText("오류: 이미지 유닛 만들기 실패");
            } else {
                epds[p] = maybe_epd;
            }
        }
    }

    foreach(p : EUDLoopPlayer()) {
        const epd = epds[p];
        if (epd == 0) continue;
        else if (MemoryXEPD(epd + 0x4D/4, Exactly, 0, 0xFF00)) { epds[p] = 0; continue; }
        const timers = EUDArray(8);
        const timer = EPD(timers) + p;
        if (MemoryEPD(timer, Exactly, 0)) {
            dwwrite_epd(timer, delays[p]);
            const face = epd + 0x21/4;
            const play = plays[p];
            var maxframe = maxframes[p];
            if (maxframe >= 16) maxframe = 15;
            // 0: 일반, 1: 좌우대칭, 2: 역재생, 3: 좌우대칭+역재생, 4: 랜덤
            if (play >= 4) {
                const r = rand();
                const frame = (r % (maxframe + 1)) << 11;
                if (r >= 16383) {
                    SetMemoryXEPD(face, SetTo, frame, 0xFF00);
                } else {
                    SetMemoryXEPD(face, SetTo, 0x10000 - frame, 0xFF00);
                }
                continue;
            }
            if (play == 0) {
                SetMemoryXEPD(face, Add, 8 << 8, 0xFF00);
                if (MemoryXEPD(face, AtLeast, (maxframe + 1) << 11, 0xFF00)) {
                    SetMemoryXEPD(face, SetTo, 0, 0xFF00);
                }
            } else if (play == 2) {
                if (MemoryXEPD(face, Exactly, 0, 0xFF00) || MemoryXEPD(face, AtLeast, (maxframe + 1) << 11, 0xFF00)) {
                    SetMemoryXEPD(face, SetTo, maxframe << 11, 0xFF00);
                } else {
                    SetMemoryXEPD(face, Subtract, 8 << 8, 0xFF00);
                }
            } else if (play == 1) {
                SetMemoryXEPD(face, Subtract, 8 << 8, 0xFF00);
                if (MemoryXEPD(face, AtMost, 0xFFFF - (maxframe << 11), 0xFF00)) {
                    SetMemoryXEPD(face, SetTo, 0xFF00, 0xFF00);
                }
            } else if (play == 3) {
                SetMemoryXEPD(face, Add, 8 << 8, 0xFF00);
                if (MemoryXEPD(face, AtMost, 0xFFFF - (maxframe << 11), 0xFF00)) {
                    SetMemoryXEPD(face, SetTo, 0x10000 - (maxframe << 11), 0xFF00);
                }
            }
        } else {
            dwsubtract_epd(timer, 1);
        }
    }
}
